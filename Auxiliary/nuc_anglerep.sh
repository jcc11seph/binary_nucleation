#!/bin/bash
# AUXILIARY SCRIPT
# DATE WRITTEN: AUGUST 19, 2021
# DATE UPDATED: SEPTEMBER 8, 2021
# PURPOSE: generate reports on the structure angles throughout the simulation run

echo " "
echo " | AUXILIARY SCRIPT | GENERATE ANGLE REPORTS | "
echo " "

# ========================================================
# -----------------    INTRODUCTION    -------------------
# ========================================================

# The ammonia structure modelled using the TraPPE forcefield
# requires it to be rigid (fixed bond length and bond angle).
# However, LINCS, the contraints algorithm used in GROMACS,
# is inefficient at applying constraints to structures
# composed of several adjacent internal angles. Given this,
# the simulation of ammonia always crashes (LINCS WARNING).
#
# To better understand the crash occuring with LINCS, the
# angles of ammonia through time is to be reported. This
# is possible with gmx angle. After generating an index file,
# this script is used to report (1) angles (maximum, minimum, and
# average) vs. time and (2) angle distribution.

# ========================================================
# ------------------    REMINDERS    ---------------------
# ========================================================

# 1. only works for production files labelled as: system_mdd*
#
# 2. before activating this script, it is required to run:
#    a. nuc_nh3angle.sh (creates index file necessary for gmx angle)
#
# 3. the following files are required to be in the same directory:
#    a. index file (.ndx)
#    b. structure file (.gro)
#    c. trajectory file (.trr or .xtc)
#
#    SPECIFIC FOR NSRI NUCLEATION PROJECT
#    - {name}.index
#    - system_mdd{#}_{molec1}_{molec2}.gro
#    - system_mdd1_${molec1}_${molec2}.trr OR
#      system_mdd1-${#}_${molec1}_${molec2}.trr
#    - system_nvt1_${molec1}_${molec2}.trr
#
# 4. declare important variables in section I, for:
#    a. index filename
#    b. duration of production run (in ps)
#    c. duration of equilibration run (in ps)
#    d. number of times the angle reports are sliced
#       (too large to handle if all data is in one file)
#    e. grace graph setting prioritization scheme
#    f. timesteps where molecules with extreme angle bending are 
#       chosen to have their angles vs. time reported
#
# 5. run script in csrc as 
#    nohup ./nuc_anglereps.sh > nohup.out &
#
# 6. the following files are generated by this script:

#    a. angles-slice_${hll}-${hld}.xvg        (* # of slice)
#    b. angles-slice_nvt.xvg 
#    c. angles_max-min_prod.xvg & .png
#    d. angles_max-min_equi.xvg & .png
#    e. angles_max-min_prod_extnd-1.xvg & .png
#    f. angles_max-min_prod_extnd-2.xvg & .png
#    g. angles_max-min_prod_extnd-3.xvg & .png
#    h. angles_max-min_prod_extnd-4.xvg & .png
#    i. angles_max-min_prod_extnd-5.xvg & .png
#    j. angles_max-min_prod_extnd-6.xvg & .png
#    k. angles_max-min_prod_extnd-7.xvg & .png
#    l. angles_max-min_prod_extnd-8.xvg & .png
#
#    m. angles-distb_${hll}-${hld}.xvg        (* # of slice)
#    n. angles-distb_nvt.xvg  
#    o. angles-dprnt_${hll}-${hld}.xvg & .png (* # of slice)
#    p. angles-dprnt_nvt.xvg & .png 
#
#    q. pos1.txt (index row number of max & min angle in production run)
#    r. pos2.txt (index row number of max & min angle in equilibrium run)
#
# 7. after activating this script, it is recommended to
#    follow up by running:
#    a. nuc_anglegro.sh (generate gro file of structures w/ extreme bending)

# ========================================================
# -------------------    SECTIONS    ---------------------
# ========================================================

# I.    DECLARE VARIABLES 
#
# II.   DETERMINE SYSTEM
#
# III.  REGISTER STRCUTURE FILENAMES 
#
# IV.   DETERMINE LENGTH OF EACH REPORT
# 
# V.    INITIATE LOOP 
#
# VI.   GENERATE ANGLE REPORTS 
#
# VII.  SETUP GRAPHS SETTINGS - AVERAGE ANGLE 
#
# VIII. SETUP GRAPHS SETTTINGS - ANGLE DISTRIBUTION
#
# IX.   SETUP GRAPHS SETTTINGS - INDIVIDUAL ANGLE
#
# X.    EXTRACT DESIRED DATA FROM REPORTS 
#
# XI.   EXTENSION -  EXTRACT DESIRED DATA FROM REPORTS 
#
# XII.  CONVERT XVG TO PNG
#
# XIII. TRANSFER REPORTS TO DESIGNATED DIRECTORY

# <=======================================================
# <==== I. DECLARE VARIABLES
# <=======================================================

echo "...(1/13) DECLARE VARIABLES"
echo " "

idx="angle_ammonia.ndx"                 #index file name
frm=6000                                #ps, total no ps in produc
eqb=40                                  #ps, total no ps in equilib
slc=10                                  #slice, no of slices
grc=0                                   #1, go straight to generating grace settings
                                        #0, no priority
tg1=0                                   #indicate timesteps from which molecules
tg2=1500                                #with extreme angles will have their angles 
tg3=3000                                #vs. time reported.
tg4=6000

[[ $grc -eq 1 ]] &&
echo "   GRAPHING PRIORITIZED, SKIPPING STEPS 5 & 6" &&
echo " "

# <=======================================================
# <==== II. DETERMINE SYSTEM
# <=======================================================

echo "...(2/13) DETERMINE SYSTEM"
echo " "

ls system_mdd*.gro > list1.txt

detnme=$( tail -1 list1.txt )
molec1=${detnme:12:3}
molec2=${detnme:16:3}

# <=======================================================
# <==== III. REGISTER STRUCTURE FILENAMES
# <=======================================================

echo "...(3/13) REGISTER STRUCTURE FILENAMES"
echo " "

compvl=1
while read -r row
do
compvt=${row:10:1}
[[ $compvt -gt $compvl ]] && compvl=$compvt
done < list1.txt
rm list1.txt

[[ $compvl == 1 ]] &&
prod="system_mdd1_${molec1}_${molec2}.trr" ||        #structure file name
prod="system_mdd1-${compvl}_${molec1}_${molec2}.trr"
equi="system_nvt1_${molec1}_${molec2}.trr"

pgro="system_mdd1_${molec1}_${molec2}.gro"           #structure file name
ngro="system_nvt1_${molec1}_${molec2}.gro"

# <=======================================================
# <==== IV. DETERMINE LENGTH OF EACH REPORT
# <=======================================================

echo "...(4/13) DETERMINE LENGTH OF EACH REPORT"
echo " "

inv=$((frm / slc))                                     #interval, length each slice
cnt=0                                                  #counter
ext=0
plc="00000"                                            #placeholder, so filenames will be same length
las=$( echo ${plc}${frm} | rev | cut -c 1-5 | rev )    #set all files names into same length
eqq=$( echo ${plc}${eqb} | rev | cut -c 1-5 | rev )    #set all files names into same length

# <=======================================================
# <==== V. INITIATE LOOP
# <=======================================================

if [[ $grc -eq 0 ]]; then             #0, grace setting is not a priority
echo "...(5/13) INITIATE LOOP"
echo " "

while [[ $cnt -ne $slc ]] ; do
cnt=$((cnt + 1))
ext=$((ext + inv))
low=$((ext - inv))

hld=$( echo ${plc}${ext} | rev | cut -c 1-5 | rev )    #set all files names into same length
hll=$( echo ${plc}${low} | rev | cut -c 1-5 | rev )    #set all files names into same length

# <=======================================================
# <==== VI. GENERATE ANGLE REPORTS
# <=======================================================

echo "...(6/13) GENERATE ANGLE REPORTS"
echo " "
[[ $cnt -ne $slc ]] && 
hih=$((ext-1)) || hih=$ext

gmx angle -f $prod -n $idx -ov angles-slice_${hll}-${hld} -b $low -e $hih -all

[[ ! -f angles-slice_${hll}-${hld}.xvg ]] &&
echo "ERROR: angles-slice_${hll}-${hld}.xvg DOES NOT EXIST" && exit 
mv angdist.xvg angles-distb_${hll}-${hld}.xvg
done

gmx angle -f $equi -n $idx -ov angles-slice_nvt -all
mv angdist.xvg angles-distb_nvt.xvg

[[ ! -f angles-slice_nvt.xvg ]] &&
echo "ERROR: angles-slice_nvt.xvg DOES NOT EXIST" && exit 
fi

# <=======================================================
# <==== VII. SETUP GRAPHS SETTINGS - AVERAGE ANGLE
# <=======================================================

echo "...(7/13) SETUP GRAPH FOR AVERAGE ANGLES"
echo " "

[[ $grc -eq 1 ]] && [[ -d anglerep ]] &&  #priority is graphing, so take out xvg files
for f in angles*.xvg ; do                 #unless if xvg files is already outside
[[ ! -f $f ]] && mv ./anglerep/xvg/* .
break
done

mmprod="angles_max-min_prod"              #preparing filenames
mmequi="angles_max-min_equi"

cat > ${mmprod}.xvg << EOF
@ title "Angle (\\c0\\C) vs. Time (ps)"  ; title font 6
@ SUBTITLE 
@ xaxis label "Time (ps)"              ; xaxis label font 6 ; xaxis ticklabel font 6
@ yaxis label "Angle (\\c0\\C)"        ; yaxis label font 6 ; yaxis ticklabel font 6
@ xaxis tick minor linewidth 2         ; xaxis tick major linewidth 2
@ yaxis tick minor linewidth 2         ; yaxis tick major linewidth 2
@ frame linewidth 2
#--
@ legend on           ; legend box on
@ legend loctype view ; legend 0.187, 0.81
@ legend length 2     ; legend font 6
@ legend vgap 2
#--
@ s0 legend "maximum"  
@ s1 legend "minimum"  
@ s2 legend "average"  
#--
@ s0 linewidth .75 ; s0 color (35,110,150)
@ s1 linewidth .75 ; s1 color (255,166,0) 
@ s2 linewidth 1   ; s2 color (112,117,113) 
#--
@ WORLD
@ autoscale onread none
@ AUTOTICKS
#--
@ PRINT
@ hardcopy device "PNG"
@ device "PNG" FONT ANTIALIASING on
@ device "PNG" OP "compression:9"
#--
EOF

cp ${mmprod}.xvg ${mmequi}.xvg

sed -i "s/SUBTITLE/subtitle \"${molec1}-${molec2}  \|  ${plc}-${las}\"   ; subtitle font 6/" ${mmprod}.xvg
sed -i "s/SUBTITLE/subtitle \"${molec1}-${molec2}  \|  ${plc}-${eqq}\"   ; subtitle font 6/" ${mmequi}.xvg

sed -i '/WORLD/ i @ page size 2500, 1000' ${mmprod}.xvg
sed -i '/WORLD/ i @ view 0.15, 0.15, 2.4, 0.835' ${mmprod}.xvg
sed -i '/WORLD/ i @ page size 1300, 1080' ${mmequi}.xvg

sed -i 's/WORLD/ world 0, 60, 6000, 160/' ${mmprod}.xvg 
sed -i 's/WORLD/ world 0, 60, 40, 180/' ${mmequi}.xvg 

sed -i 's/PRINT/ print to "angles_max-min_prod.png"/' ${mmprod}.xvg 
sed -i 's/PRINT/ print to "angles_max-min_equi.png"/' ${mmequi}.xvg 

# <=======================================================
# <==== VIII. SETUP GRAPHS SETTINGS - ANGLE DISTRIBUTION
# <=======================================================

echo "...(8/13) SETUP GRAPH FOR ANGLE DISTRIBUTION"
echo " "

cnt=0
ext=0
while [[ $cnt -ne $slc ]] ; do
cnt=$((cnt + 1))
ext=$((ext + inv))
low=$((ext - inv))

hld=$( echo ${plc}${ext} | rev | cut -c 1-5 | rev )    #set all files names into same length
hll=$( echo ${plc}${low} | rev | cut -c 1-5 | rev )    #set all files names into same length

ppdisb="angles-distb_${hll}-${hld}"  #preparing filenames
ppdisp="angles-dprnt_${hll}-${hld}"
nndisb="angles-distb_nvt"
nndisp="angles-dprnt_nvt"

cp $ppdisb.xvg $ppdisp.xvg           #reports for production run

SED_COM="/ title/ a"
SED_COM+="@ title font 6 \n"
SED_COM+="@ xaxis label font 6 ; xaxis ticklabel font 6 \n" 
SED_COM+="@ yaxis label font 6 ; yaxis ticklabel font 6; " 
sed -i "$SED_COM" $ppdisp.xvg

sed -i "s/subtitle \"/subtitle \"${molec1}-${molec2}  \|  ${hll}-${hld}  \|  /g" $ppdisp.xvg

SED_COM="/subtitle/ a"
SED_COM+="@ subtitle font 6 \n"
SED_COM+="@ world 60,0,160,0.25 \n"  
SED_COM+="@ autoscale onread none \n"
SED_COM+="@ AUTOTICKS \n"
SED_COM+="@ print to \"${ppdisp}.png\" \n"
SED_COM+="@ hardcopy device \"PNG\""
sed -i "$SED_COM" $ppdisp.xvg
done

cp $nndisb.xvg $nndisp.xvg           #reports for equilibration run 

SED_COM="/ title/ a"
SED_COM+="@ title font 6 \n"
SED_COM+="@ xaxis label font 6 ; xaxis ticklabel font 6 \n" 
SED_COM+="@ yaxis label font 6 ; yaxis ticklabel font 6" 
sed -i "$SED_COM" $nndisp.xvg

sed -i "s/subtitle \"/subtitle \"${molec1}-${molec2}  \|  /g" $nndisp.xvg

SED_COM="/subtitle/ a"
SED_COM+="@ subtitle font 6 \n"
SED_COM+="@ world 60,0,160,0.25\n"  
SED_COM+="@ autoscale onread none \n"
SED_COM+="@ AUTOTICKS \n"
SED_COM+="@ print to \"${nndisp}.png\" \n"
SED_COM+="@ hardcopy device \"PNG\""
sed -i "$SED_COM" $nndisp.xvg

# <=======================================================
# <==== IX. SETUP GRAPHS SETTINGS - INDIVIDUAL ANGLE
# <=======================================================

echo "...(9/13) SETUP GRAPH FOR AVERAGE ANGLES"
echo " "

cat > ${mmprod}_extended.temp << EOF
@ title "Angle (\\c0\\C) vs. Time (ps)"  ; title font 6
@ SUBTITLE 
@ xaxis label "Time (ps)"              ; xaxis label font 6 ; xaxis ticklabel font 6
@ yaxis label "Angle (\\c0\\C)"        ; yaxis label font 6 ; yaxis ticklabel font 6
@ xaxis tick minor linewidth 2         ; xaxis tick major linewidth 2
@ yaxis tick minor linewidth 2         ; yaxis tick major linewidth 2
@ frame linewidth 2
#--
@ legend on           ; legend box on
@ legend loctype view ; legend 0.187, 0.81
@ legend length 2     ; legend font 6
@ legend vgap 2
#--
@ s0 legend "maximum"  
@ s1 legend "minimum"  
@ s2 legend "molecule"  
#--
@ s0 linewidth .75 ; s0 color (35,110,150)
@ s1 linewidth .75 ; s1 color (255,166,0) 
@ s2 linewidth .75 ; s2 color (139,193,179)
#--
@ WORLD
@ autoscale onread none
@ AUTOTICKS
#--
@ PRINT
@ hardcopy device "PNG"
@ device "PNG" FONT ANTIALIASING on
@ device "PNG" OP "compression:9"
#--
EOF

sed -i "s/SUBTITLE/subtitle \"${molec1}-${molec2}  \|  ${plc}-${las}  \|  MOLECULE APPEND\"; subtitle font 6/" ${mmprod}_extended.temp
sed -i '/WORLD/ i @ page size 2500, 1000' ${mmprod}_extended.temp
sed -i '/WORLD/ i @ view 0.15, 0.15, 2.4, 0.835' ${mmprod}_extended.temp
sed -i 's/WORLD/ world 0, 60, 6000, 160/' ${mmprod}_extended.temp 
sed -i 's/PRINT/ print to "FILENAME"/' ${mmprod}_extended.temp 

cp ${mmprod}_extended.temp ${mmprod}_extd-1.xvg
cp ${mmprod}_extended.temp ${mmprod}_extd-2.xvg
cp ${mmprod}_extended.temp ${mmprod}_extd-3.xvg
cp ${mmprod}_extended.temp ${mmprod}_extd-4.xvg
cp ${mmprod}_extended.temp ${mmprod}_extd-5.xvg
cp ${mmprod}_extended.temp ${mmprod}_extd-6.xvg
cp ${mmprod}_extended.temp ${mmprod}_extd-7.xvg
cp ${mmprod}_extended.temp ${mmprod}_extd-8.xvg

# <=======================================================
# <==== X. EXTRACT DESIRED DATA FROM REPORTS 
# <=======================================================

echo "...(10/13) EXTRACT DATA FROM REPORTS"
echo " "

[[ -f pos1.txt ]] && rm pos1.txt
[[ -f pos2.txt ]] && rm pos2.txt
 
AWK_COM='!/^(#|@)/ {'                    #this excludes all line containin
AWK_COM+='m=$3;s=3;n=$3;t=3;'
AWK_COM+='for (i=4; i<=NF; i++) { '
AWK_COM+='if ($i < m) {m=$i ; s=i} ;'    #m will hold the value, s will hold the position
AWK_COM+='if ($i > n) {n=$i ; t=i} } ;'  #n will hold the value, t will hold the position
AWK_COM+='print $1,n,m,$2 ;'             #t for tall, s for small

for file in ./angles-slice*-*.xvg 
do
    echo "   EXTRACTING DATA FROM FILE: $file"
    echo " "
    awk "${AWK_COM}print \$1,t-2+1,s-2+1 >> \"pos1.txt\" }" $file >> ${mmprod}.xvg
done                                                                                                                            
    awk "${AWK_COM}print \$1,t-2+1,s-2+1 >> \"pos2.txt\" }" angles-slice_nvt.xvg >> ${mmequi}.xvg

# [ QUESTION ] Why -2+1?
# 
# gmx angle reports in the same order that the atoms where listed in the index file.
# (e.g. entry 1 in index file is in column 3 of the first row in the angles-slice report)
# We subtract 2, because the first column is time entry and the second column is average entry.
# We only want to count the angles obtained from individual measurement. 
# We +1, because know that the index file has a header. Hence, when we count the rows, we don't 
# want to include the header.

# <=======================================================
# <==== XI. EXTENSION - EXTRACT DATA FROM REPORTS
# <=======================================================

echo "...(11/13) EXTENSION - EXTRACT DATA FROM REPORTS"
echo " "

big1=$(awk "{gsub(/\\\..*$/, \"\", \$1); if (\$1 == $tg1) {t=\$2; print t+2-1; exit}}" pos1.txt) #get row number from pos.txt
big2=$(awk "{gsub(/\\\..*$/, \"\", \$1); if (\$1 == $tg2) {t=\$2; print t+2-1; exit}}" pos1.txt)
big3=$(awk "{gsub(/\\\..*$/, \"\", \$1); if (\$1 == $tg3) {t=\$2; print t+2-1; exit}}" pos1.txt)
big4=$(awk "{gsub(/\\\..*$/, \"\", \$1); if (\$1 == $tg4) {t=\$2; print t+2-1; exit}}" pos1.txt)

sml1=$(awk "{gsub(/\\\..*$/, \"\", \$1); if (\$1 == $tg1) {s=\$3; print s+2-1; exit}}" pos1.txt)
sml2=$(awk "{gsub(/\\\..*$/, \"\", \$1); if (\$1 == $tg2) {s=\$3; print s+2-1; exit}}" pos1.txt)
sml3=$(awk "{gsub(/\\\..*$/, \"\", \$1); if (\$1 == $tg3) {s=\$3; print s+2-1; exit}}" pos1.txt)
sml4=$(awk "{gsub(/\\\..*$/, \"\", \$1); if (\$1 == $tg4) {s=\$3; print s+2-1; exit}}" pos1.txt)

atb[1]=$(awk "FNR==$big1 {print \$1}" $idx)  #using row number, get atom number from index 
atb[2]=$(awk "FNR==$big2 {print \$1}" $idx)
atb[3]=$(awk "FNR==$big3 {print \$1}" $idx)
atb[4]=$(awk "FNR==$big4 {print \$1}" $idx)

atb[5]=$(awk "FNR==$sml1 {print \$1}" $idx)
atb[6]=$(awk "FNR==$sml2 {print \$1}" $idx)
atb[7]=$(awk "FNR==$sml3 {print \$1}" $idx)
atb[8]=$(awk "FNR==$sml4 {print \$1}" $idx)

cnt=0
for i in ${atb[@]} ; do                      #using atom number, get residue number from gro file
cnt=$((cnt+1))
AWK_COM="{if (FNR<10000 && $i==\$3) print \$1 ; "
AWK_COM+="else if ($i=="
AWK_COM+='substr($2,length($2)-4)) '
AWK_COM+='print $1}'
get=$(awk "${AWK_COM}" $pgro | sed 's/[A-Z].*$//')

sed -i "s/APPEND/${get}/g" ${mmprod}_extd-$cnt.xvg
sed -i "s/FILENAME/${mmprod}_extd-$cnt.png/g" ${mmprod}_extd-$cnt.xvg
done

AWK_COM='!/^(#|@)/ {'                        #this excludes all line containing # or @ symbol
AWK_COM+='m=$3;n=$3;'
AWK_COM+='a=$3;b=$3;c=$3;d=$3;'
AWK_COM+='e=$3;f=$3;g=$3;h=$3;'
AWK_COM+='for (i=4; i<=NF; i++) { '
AWK_COM+='if ($i < m) {m=$i}; '              #m will hold the value,
AWK_COM+='if ($i > n) {n=$i}; '              #n will hold the value,
AWK_COM+="if (i == $big1) {a=\$i}; "
AWK_COM+="if (i == $big2) {b=\$i}; "
AWK_COM+="if (i == $big3) {c=\$i}; "
AWK_COM+="if (i == $big4) {d=\$i}; "
AWK_COM+="if (i == $sml1) {e=\$i}; "
AWK_COM+="if (i == $sml2) {f=\$i}; "
AWK_COM+="if (i == $sml3) {g=\$i}; "
AWK_COM+="if (i == $sml4) {h=\$i} }; "
AWK_COM+="print \$1,n,m,a >> \"${mmprod}_extd-1.xvg\"; "
AWK_COM+="print \$1,n,m,b >> \"${mmprod}_extd-2.xvg\"; "
AWK_COM+="print \$1,n,m,c >> \"${mmprod}_extd-3.xvg\"; "
AWK_COM+="print \$1,n,m,d >> \"${mmprod}_extd-4.xvg\"; "
AWK_COM+="print \$1,n,m,e >> \"${mmprod}_extd-5.xvg\"; "
AWK_COM+="print \$1,n,m,f >> \"${mmprod}_extd-6.xvg\"; "
AWK_COM+="print \$1,n,m,g >> \"${mmprod}_extd-7.xvg\"; "
AWK_COM+="print \$1,n,m,h >> \"${mmprod}_extd-8.xvg\" }"

for file in ./angles-slice*-*.xvg 
do
    echo "   EXTRACTING DATA FROM FILE: $file"
    echo " "
    awk "${AWK_COM}" $file
done                                                                                                                            

# <=======================================================
# <==== XII. CONVERT XVG TO PNG
# <=======================================================

echo "...(12/13) PRINT GRAPHS INTO PNG"
echo " "
   
for file in *dprnt*.xvg *max-min*.xvg ; do
grace -nxy $file -hardcopy 
done

# <=======================================================
# <==== XII. TRANSFER REPORTS TO DESIGNATED DIRECTORY
# <=======================================================

echo "...(13/13) TRANSFER REPORTS TO DESIGNATED DIRECTORY"
echo " "

[[ ! -d ./anglerep/xvg ]] &&
mkdir -p ./anglerep/xvg
mv angles*.xvg ./anglerep/xvg

[[ ! -d ./anglerep/png ]] &&
mkdir ./anglerep/png
mv angles*.png ./anglerep/png

echo "...ANGLES DIRECTORY CONTENTS"

echo " "
echo "...xvg"
ls -ltr ./anglerep/xvg | awk '{print $6, $7, $8, $9}' 

echo " "
echo "...png"
ls -ltr ./anglerep/png | awk '{print $6, $7, $8, $9}' 

# ========================================================
# ------------------------ END ---------------------------
# ========================================================

echo " "
echo "...DONE"
echo " "

duration=$SECONDS
echo " | TIME ELAPSED: $(($duration / 60)) MINUTE/S and $(($duration % 60)) SECOND/S |"
echo " "
