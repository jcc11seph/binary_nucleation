#!/bin/bash
# AUXILIARY SCRIPT
# DATE WRITTEN: AUGUST 30, 2021
# DATE UPDATED: AUGUST 30, 2021
# PURPOSE: obtain structure of molecules with extreme bending 

echo " "
echo " | AUXILIARY SCRIPT | OBTAIN STRUCTURE OF MOLECULES WITH EXTREME BENDING | "
echo " "

# ========================================================
# -----------------    INTRODUCTION    -------------------
# ========================================================

# The ammonia structure modelled using the TraPPE forcefield
# requires it to be rigid (fixed bond length and bond angle).
# However, LINCS, the contraints algorithm used in GROMACS,
# is inefficient at applying constraints to structures
# composed of several adjacent internal angles. Given this,
# the simulation of ammonia always crashes (LINCS WARNING).
#
# To better understand the crash occuring with LINCS, the
# angles of ammonia through time is to be reported. This
# is possible with gmx angle. After generating an index file and
# inspecting angle reports, this script is used to output the
# structure file of desired molecules that exhibited extreme 
# bending.

# ========================================================
# ------------------    REMINDERS    ---------------------
# ========================================================

# 1. only works for production files labelled as: system_mdd*
#
# 2. before activating this script, it is required to run:
#    a. nuc_nh3angle.sh (creates index file necessary for gmx angle)
#    a. nuc_anglerep.sh (generates angle reports) [pos texts needed]
#
# 3. the following files are required to be in the same directory:
#    a. index file (.ndx)
#    b. structure file (.gro)
#    c. trajectory file (.trr or .xtc)
#    d. binary topology file (.tpr) 
#    e. pos1.txt 
#    f. pos2.txt 
#
#    SPECIFIC FOR NSRI NUCLEATION PROJECT
#    - {name}.index
#    - system_mdd{#}_{molec1}_{molec2}.gro
#    - system_nvt1_{molec1}_{molec2}.gro
#    - system_mdd1_${molec1}_${molec2}.trr OR
#      system_mdd1-${#}_${molec1}_${molec2}.trr
#    - system_nvt1_${molec1}_${molec2}.trr
#    - system_mdd1_${molec1}_${molec2}.tpr
#    - system_nvt1_${molec1}_${molec2}.tpr
#    - pos1.txt
#    - pos2.txt
#
# 4. declare important variables in section I, for:
#    a. index filename
#    b. time steps in production run (in ps) [five]
#    c. time steps in equilibration run (in ps) [three]
#    d. rendering priority scheme
#
# 5. run script in csrc as
#    nohup ./nuc_anglegro.sh > nohup.out &
#
# 6. the following files are generated by this script:
#    a. prframes-${cnt}-big.trr (*5, for each timestep)
#    b. prframes-${cnt}-big.gro (*5, for each timestep)
#    c. prframes-${cnt}-sml.trr (*5, for each timestep)
#    d. prframes-${cnt}-sml.gro (*5, for each timestep)
#    e. nvframes-${cnt}-big.trr (*3, for each timestep)
#    f. nvframes-${cnt}-big.gro (*3, for each timestep)
#    g. nvframes-${cnt}-sml.trr (*3, for each timestep)
#    h. nvframes-${cnt}-sml.gro (*3, for each timestep)
#    i. open.tcl
#    j. snap.tcl

# ========================================================
# -------------------    SECTIONS    ---------------------
# ========================================================

# I.    DECLARE VARIABLES
#
# II.   DETERMINE SYSTEM
#
# III.  REGISTER STRCUTURE FILENAMES
#
# IV.   INITIATE LOOP FOR ALL DESIRED TIMESTEPS
#
# V.    GET MARKERS OF BIGGEST AND SMALLEST ANGLE
#
# VI.   USE MARKER TO GET ATOM NO. OF BIG. AND SMALL.
#
# VII.  USE ATOM NO. TO GET RESIDUE NO. 
#
# VIII. CREATE INDEX FILE FOR TRJCONV
#
# IX.   USE TRJCONV TO GET .GRO & .TRR 
#
# X.    TRANSFER FILES TO DESIGNATED DIRECTORY 
#
# XI.   GENERATE VMD SCRIPT - LAUNCH  
#
# XII.   GENERATE VMD SCRIPT - RENDER  

# <=======================================================
# <==== I. DECLARE VARIABLES
# <=======================================================

idx="angle_ammonia.ndx"

pr[1]=0                           # designated for production run (in ps) 
pr[2]=1500
pr[3]=3000
pr[4]=4500
pr[5]=6000

pr[6]=0                           # designated for equilibration run (in ps)
pr[7]=20
pr[8]=40

ren=1

# <=======================================================
# <==== II. DETERMINE SYSTEM
# <=======================================================

if [[ $ren -eq 0 ]]; then
ls system_mdd*.gro > list1.txt

detnme=$( tail -1 list1.txt )
molec1=${detnme:12:3}
molec2=${detnme:16:3}

# <=======================================================
# <==== III. REGISTER STRUCTURE FILENAMES
# <=======================================================

compvl=1
while read -r row
do
compvt=${row:10:1}
[[ $compvt -gt $compvl ]] && compvl=$compvt
done < list1.txt
rm list1.txt

[[ $compvl == 1 ]] &&
prod="system_mdd1_${molec1}_${molec2}.trr" ||      
prod="system_mdd1-${compvl}_${molec1}_${molec2}.trr"
equi="system_nvt1_${molec1}_${molec2}.trr"

ptpr="system_mdd1_${molec1}_${molec2}.tpr"
etpr="system_nvt1_${molec1}_${molec2}.tpr"

pgro="system_mdd1_${molec1}_${molec2}.gro"         #structure file name
ngro="system_nvt1_${molec1}_${molec2}.gro"

# <=======================================================
# <==== IV. INITIATE LOOP FOR ALL DESIRED TIMESTEPS
# <=======================================================

cnt=0
for i in "${pr[@]}" ; do
cnt=$((cnt + 1))

# <=======================================================
# <==== V. GET MARKERS OF BIGGEST AND SMALLEST ANGLE
# <=======================================================

[[ $cnt -le 5 ]] &&         
pvst="pos1.txt" || pvst="pos2.txt"

AWK_COM='{gsub(/\..*$/, "", $1) ;'
AWK_COM+="if ($i==\$1) {"
AWK_COM+='print $2 > "bigrow.txt" ;'
AWK_COM+='print $3 > "smlrow.txt" ;' 
AWK_COM+='exit} }'
awk "${AWK_COM}" $pvst 

bigrow=$(head -1 "bigrow.txt")
smlrow=$(head -1 "smlrow.txt")
rm bigrow.txt
rm smlrow.txt

# <=======================================================
# <==== VI. USE MARKER TO GET ATOM NO. OF BIG. AND SMALL.
# <=======================================================

AWK_COM="FNR==$bigrow {" 
AWK_COM+='print $1 }'
bigatm=$(awk "${AWK_COM}" $idx)

AWK_COM="FNR==$smlrow {"
AWK_COM+='print $1 }'
smlatm=$(awk "${AWK_COM}" $idx) 

# <=======================================================
# <==== VII. USE ATOM NO. TO GET RESIDUE NO.
# <=======================================================

[[ $cnt -le 5 ]] && 
inpt=$pgro || inpt=$ngro

AWK_COM="{if (FNR<10000 && $bigatm==\$3) print \$1 ; "
AWK_COM+="else if (${bigatm}=="
AWK_COM+='substr($2,length($2)-4)) '
AWK_COM+='print $1}'
bigres=$(awk "${AWK_COM}" $inpt | sed 's/[A-Z].*$//')

AWK_COM="{if (FNR<10000 && $smlatm==\$3) print \$1 ;"
AWK_COM+="else if (${smlatm}=="
AWK_COM+='substr($2,length($2)-4)) '
AWK_COM+='print $1}'
smlres=$(awk "${AWK_COM}" $inpt | sed 's/[A-Z].*$//')

# <=======================================================
# <==== VIII. CREATE INDEX FILE FOR TRJCONV 
# <=======================================================

printf "r $bigres \n q \n" | gmx make_ndx -f $inpt -o big.ndx
printf "r $smlres \n q \n" | gmx make_ndx -f $inpt -o sml.ndx
sed -i "s/r_$bigres/molecule/g" big.ndx
sed -i "s/r_$smlres/molecule/g" sml.ndx

# <=======================================================
# <==== IX. USE TRJCONV TO GET .GRO & .TRR
# <=======================================================

if [[ $cnt -le 5 ]]; then
outff=$prod
outss=$ptpr
outoo="prframes"
else
outff=$equi
outss=$etpr
outoo="nvframes"
fi

echo molecule | gmx trjconv -f $outff -s $outss -o ${outoo}-${cnt}-big.trr -n big.ndx -b $i -e $i
echo molecule | gmx trjconv -f $outff -s $outss -o ${outoo}-${cnt}-big.gro -n big.ndx -b $i -e $i
echo molecule | gmx trjconv -f $outff -s $outss -o ${outoo}-${cnt}-sml.trr -n sml.ndx -b $i -e $i
echo molecule | gmx trjconv -f $outff -s $outss -o ${outoo}-${cnt}-sml.gro -n sml.ndx -b $i -e $i

rm big.ndx
rm sml.ndx
done

# <=======================================================
# <==== X. TRANSFER FILES TO DESIGNATED DIRECTORY
# <=======================================================

[[ -d "anglegro/" ]] &&
rm -r anglegro 
mkdir anglegro

mv *frames*-big.gro anglegro
mv *frames*-big.trr anglegro 
mv *frames*-sml.gro anglegro
mv *frames*-sml.trr anglegro 
fi

# <=======================================================
# <==== XI. GENERATE VMD SCRIPT - LAUNCH
# <=======================================================

echo "# I. STRUCTURE FILES" > anglegro/open.tcl
# - - - - - - - - - - -
cn=0
for file in anglegro/*.gro; do
 cn=$((cn+1))
 na=$(echo $file | cut -d. -f1 | cut -d/ -f2 )
 echo "set fileid${cn} $na" >> anglegro/open.tcl
done
# - - - - - - - - - - -
cat >> anglegro/open.tcl << EOF

# II. PREPARE ORDER OF ITERATION FOR STRUCTURE FILES
for {set i 1} {\$i <= ${cn}} {incr i} { 
EOF
# - - - - - - - - - - -
cn=0
for file in anglegro/*.gro; do
 cn=$((cn+1))
 echo "if {\$i==${cn}} {set cfile \$fileid${cn}}" >> anglegro/open.tcl
done
# - - - - - - - - - - -
cat >> anglegro/open.tcl << 'EOF'   

# III. FORMAT REPRESENTATION AND DISPLAY
set j [expr {$i-1}]
mol new $cfile.gro
mol addfile $cfile.trr
mol modstyle "all" $j CPK 0.2 0.1 42 42
mol off $j 
axes location off

label textsize 4
label textthickness 5
color Labels Angles black
color Display Background white
display resize 950 950
display projection Orthographic 
display depthcue off
display shadows on
display ambientocclusion on
scale by 1.4
light 1 off
light 2 on
light 3 on
}  

#IV. LAUNCH ADDITIONAL MENU
menu tkcon on
menu rmsd on
EOF

# <=======================================================
# <==== XII. GENERATE VMD SCRIPT - RENDER
# <=======================================================

sed -n '/# III/q;p' anglegro/open.tcl > anglegro/snap.tcl
sed -i '/for/ i set q 0' anglegro/snap.tcl
ca=$((cn*6))
# - - - - - - - - - - -
cat >> anglegro/snap.tcl << EOF
# III. RENDER IMAGES
set j [expr {\$i-1}]
mol on \$j

set q [expr {\$q+1}]
puts "RENDERING FILE \$q of $ca : \$cfile-1.png (w/ POVRAY)"
puts " "
puts "...DONE RENDERING"
puts " "
render POV3 \$cfile-1-clean "/usr/bin//povray" -I%s -O%s.png -D +X +A +FN +H2000 +W2000 +UA

set q [expr {\$q+1}]
puts "RENDERING FILE \$q of $ca : \$cfile-1.tga (w/ SNAPSHOT)"
puts " "
puts "...DONE RENDERING"
puts " "
label add Angles \$j/1 \$j/0 \$j/3
label textoffset Angles 0 { 0.1 0 }
render snapshot \$cfile-1-label.tga Heigth=3000 Width=3000
label delete Angles 0

set q [expr {\$q+1}]
puts "RENDERING FILE \$q of $ca : \$cfile-2.png (w/ POVRAY)"
puts " "
puts "...DONE RENDERING"
puts " "
rotate y by 90
render POV3 \$cfile-2-clean "/usr/bin//povray" -I%s -O%s.png -D +X +A +FN +H2000 +W2000 +UA

set q [expr {\$q+1}]
puts "RENDERING FILE \$q of $ca : \$cfile-2.tga (w/ SNAPSHOT)"
puts " "
puts "...DONE RENDERING"
puts " "
label add Angles \$j/2 \$j/0 \$j/3
label textoffset Angles 0 { -0.4 0.4 }
render snapshot \$cfile-2-label.tga Heigth=3000 Width=3000
label delete Angles 0

set q [expr {\$q+1}]
puts "RENDERING FILE \$q of $ca : \$cfile-3.png (w/ POVRAY)"
puts " "
puts "...DONE RENDERING"
puts " "
rotate y by 90
render POV3 \$cfile-3-clean "/usr/bin//povray" -I%s -O%s.png -D +X +A +FN +H2000 +W2000 +UA

set q [expr {\$q+1}]
puts "RENDERING FILE \$q of $ca : \$cfile-3.tga (w/ SNAPSHOT)"
puts " "
puts "...DONE RENDERING"
puts " "
label add Angles \$j/1 \$j/0 \$j/2
label textoffset Angles 0 { -.9 0.1 }
render snapshot \$cfile-3-label.tga Heigth=3000 Width=3000
label delete Angles 0

rotate y by -180
mol off \$j
file delete \$cfile-1-clean
file delete \$cfile-1-label
file delete \$cfile-2-clean
file delete \$cfile-2-label                                                                                                                                                                                                          
file delete \$cfile-3-clean
file delete \$cfile-3-label
}

# IV. POST-RENDERING
#mogrify -antialias -density 300 -format png -quality 100 -colorspace RGB *.tga
#mkdir tga
#mkdir png 
#mkdir png/clean
#mkdir png/label
#mv *.tga tga
#mv *-clean.png png/clean
#mv *-label.png png/label

exit
EOF

# ========================================================
# ------------------      END      -----------------------
# ========================================================

echo "...DONE"
echo " "

duration=$SECONDS
echo " | TIME ELAPSED: $(($duration / 60)) MINUTE/S and $(($duration % 60)) SECOND/S |"
echo " " 

echo "...PROCEED WITH THE FOLLOWING STEPS"
echo " "
echo "   (1) in command line"
echo "           enter: vmd -e open.tcl"
echo " "
echo "   (2) in RMSD calculator,"
echo "           input: resname NH3"
echo "           uncheck Backbone only"
echo "           click ALIGN"
echo " "
echo "   (3) in TKconsole"
echo "           enter: source snap.tcl"
echo " "
echo "   (4) in command line"
echo "           enter: mogrify -antialias -density 300 -format png -quality 100 -colorspace RGB *.tga"
echo " "
